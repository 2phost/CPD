BUG 25-10-13 17:30 (6)
Status: identificado

Assumpções: s_breeding > 1
0|   | $ | -> 0| s | $ |
1| i | i |    1| i | i |

Neste cenário um squirrel_on_tree, quando abandona a tree, esta não fica como tree mas como squirrel_on_tree, na
mesma.

================================================================================================================
BUG 23-10-13 00:00 (5)
STATUS: resolvido - deve ser testado

Assumpções: breeding_period do w e do s é 1.
0|   | w | -> 0|    |    |
1| s |   |    1| s2 | s1 |

Não há qualquer tipo de gestão de conflitos implementado, como tal o lobo é "consumido" pela chegada do esquilo.

SOLUCAO:
Implementado mecanismo de resolucao de conflito, de acordo com as regras do enunciado. Estes consistem em dois
switch's, um para o wolf outro para o squirrel, que basicamente verificam se a célula para a qual a entidade se
está a mover, já possui alguma outra entidade lá dentro. Assim e dependendo do tipo de entidade que se encontra
na célula são aplicadas as regras de conflito.

NOTA:
a regra de resolucao wolf-wolf é muito confusa e precisa de ser revista.

================================================================================================================
BUG 22-10-13 23:20 (4)
STATUS: resolvido

Assumpção: breeding period de squirrel 1
0| s | t | -> 0|   | $ | -> 0| s | s |
1| i | i |    1| i | i |    1| i | i |

Este bug faz com que quando um squirrel procria numa célula que contenha uma árvore, a célula não fica marcada
como uma squirrel_on_tree, mas apenas como squirrel.
Este problema surge porque a função makeBabies não contempla este cenários.

SOLUCAO:
makeBabies(sot ? squirrel_on_tree: squirrel, &world[d_world][x][y], move_motion, s_breeding, 0);

NOTA:
modificar a função makeBabies é possivelmente uma solução mais limpa.

================================================================================================================
BUG 22-10-13 23:20 (3)
STATUS: resolvido

0| s | i | -> 0|   | i |
1| i | i |    1| i | i |

Este bug faz com que uma entidade que não se mova desapareça do mundo. Isto acontece porque as entidade apenas
são passadas para o mundo de escrita quando se movem, sendo posteriormente limpas no mundo antigo pela função
cleanWorld.

SOLUCAO:
Quando uma entidade não se move é copiada, na totalidade (actualizando os breeding_periods), para o "novo mundo"

================================================================================================================
BUG 22-10-13 22:58 (2)
STATUS: resolvido

0| s | t | -> 0|   | $ | -> 0| s |   |
1|   |   |    1|   |   |    1|   |   |

Este bug faz com que a árvore, em que um squirrel_on_tree se encontra desapareça após a saída do mesmo.
Este problema surge pois na função computeCell a entidade squirrel_on_tree é tratada como um squirrel normal.
Assim, quando um squirrel abandona uma celula esta passa a empty, devido à invocação da função clearWorldCell.

Solução:
Removendo as chamadas à função clearWorldCEell e deixando a limpeza a cabo da função cleanWorld, o problema
fica resolvido.

================================================================================================================

BUG 22-10-13 22:50 (1)
STATUS: resolvido
    0   1
0 | s | t |  -> 0|   | $ | -> 0|   | t |
1 |   |   |     1|   |   |    1|   |   |

Aparentemente quando um squirrel está numa árvore, este não consegue sair de cima da mesma,
acabando por desaparecer quando é apanhado pela função cleanWorld.
Este problema surge porque a função move não contempla a existência de uma entidade squirrel_on_tree.

Solução:
foi criado um case para a entidade squirrel_on_tree (sem break), que é executado como um squirrel normal.

================================================================================================================



